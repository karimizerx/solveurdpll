                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 3 novembre 2023, 23h59

Identité
--------
Nombre de binôme: 10
Nom, prénom 1: LAÏDOUNI Mohamed
Nom, prénom 2: KHEMAKHEM Ayman


Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?

Oui, `make dppl` s'exécte sans erreurs ou warnings. Et `./dpll sudoku-4x4.cnf` donne bien la réponse attendue (présente dans le README).

---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ? 
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.

Sans `filter_map`, simplifie devient récurssive, et nous avons appliqué un pattern matching sur l'ensemble des clauses, avec disjonction de trois cas :
   - la liste des clauses est vide -> On renvoie la liste `[]`.
   - la clause actuelle contient le littéral `l` -> On supprime cette liste et on continue.
   - la clause actuelle contient le littéral `not(l)` ou non -> On supprime le littéral `not(l)` si nécessaire et on continue.

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.

Pour l'implémentation de `unitaire`, nous n'avons utilisé aucune fonction auxiliaire. Celle-ci est récursive, et utilise un pattern matching sur chaque clause :
   - si on trouve une clause de type `p :: []`, i.e une clause avec seulement une proposition `p`, alors cette clause est unitaire et on renvoie le littéral `p`.
   - si on tombe sur la liste vide, on lève une exception `Not_found` à l'aide de la fonction `raise`.

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.

Pour l'implémentation de `pur`, nous avons utilisé plusieurs fonctions auxiliaires :
   - `List.concat` pour concaténer toutes les clauses dans `clauses`, puis `List.sort_uniq` pour récupérer la liste (triée) de toutes les propositions présentes dans la formule.
   - une fonction auxiliaire `aux` :
      - si on trouve un littéral `p` qui n'a pas sa négation `-p` (recherche avec `List.mem`) dans la liste des propositions, alors il est pur et on le renvoie.
      - si on tombe sur la liste vide, on lève une exception `Not_found` à l'aide de la fonction `raise`.

---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.

La différence entre ces deux fonctions est la recherche d'une clause unitaire ou d'un littéral pur dans le `solveur_dpll_rec`, 
qui n'est pas présente dans le `sovleur_split` (celle-ci se contente de choisir le premier littéral de la première clause).
En effet, trouver une clause unitaire ou un littéral pur réduit drastiquement la recherche d'une interprétation pour la formule.

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

Concernant la fonction `choix : int list list -> int`, l'idée est la suivante :
Nous essayons d'obtenir une clause unitaire, pour simplifier au plus notre formule.
Pour cela, nous ne considérons dans `choix` que les clauses les plus petites.
Puis, parmis toutes les propositions que nous pouvons simplifier, afin de poursuivre notre objectif de clause unitaire,
nous cherchons la proposition la plus présente. Et c'est celle-ci que l'on choisit.

Ce choix nous paraît être le plus efficace. Pourtant, force est de constater que, pour certains fichiers tests :
`unsat/dubois20.cnf unsat/dubois21.cnf sat/ais12.cnf unsat/bf1355-075.cnf unsat/aim-50-1_6-no-1.cnf sat/sudoku-9x9-god.cnf sat/hamilton.cnf.txt`
Cette méthode est très lente. Et même plus lente que si nous choisissions toujours la première proposition de la première clause. 

---

--fin du fichier RENDU--